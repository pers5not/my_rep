# Давайте объединим все, что мы узнали о повторном использовании кода.
# Во-первых, давайте вернемся к **наследованию**. Запустите следующую ячейку, которая определяет общий класс Animal.
from turtle import Turtle


class Animal:
    name = ""
    category = ""

    def __init__(self, name):
        self.name = name

    def set_category(self, category):
        self.category = category

# Того, что у нас есть, недостаточно, чтобы сделать многое — пока. Вот куда вы входите.

# В следующей ячейке определите класс Turtle, который наследуется от класса Animal. Затем продолжайте и установите его категорию. Например, черепаху обычно считают рептилией. Хотя современная кладистика ставит под сомнение эту категоризацию, для целей этого упражнения мы будем говорить, что черепахи — это рептилии!


class Turtle(Animal):
    category = ('Reptile')


# Запустите следующую ячейку, чтобы проверить, правильно ли вы определили свой класс Turtle и установили его категорию на рептилию.
print(Turtle.category)

# # Был ли на выходе вышеуказанный сотовый гад? Если нет, вернитесь и отредактируйте свой класс Turtle, убедившись, что он наследуется от класса Animal, а его категория правильно установлена ​​на рептилию. Обязательно повторно запустите эту ячейку, как только закончите редактирование. Ты понял? Если так, отлично!

# # Далее, давайте немного попрактикуемся в композиции. Для этого потребуется второй тип животного из той же категории, что и первый. Например, поскольку вы уже создали класс Turtle, создайте класс Snake. Не забывайте, что он также наследуется от класса Animal и его категория должна быть установлена ​​как рептилия.


class Snake(Animal):
    category = ('Reptile')


print(Snake.category)
# # Теперь предположим, что у нас есть большое разнообразие животных (таких как черепахи и змеи) в зоопарке. Ниже у нас есть класс Zoo. Мы собираемся использовать его для организации наших различных животных. Помните, наследование говорит, что Черепаха — это Животное, но Зоопарк — это не Животное, а Животное — это не Зоопарк, хотя они связаны друг с другом.

# # Заполните пробелы для класса Zoo ниже, чтобы можно было использовать функцию zoo.add_animal() для добавления экземпляров подклассов Animal, созданных ранее. После того, как вы добавите их все, вы сможете использовать zoo.total_of_category(), чтобы точно сказать, сколько отдельных типов животных есть в зоопарке для каждой категории! Обязательно запустите ячейку, как только закончите редактирование.


class Zoo:
    def __init__(self):
        self.current_animals = {}

    def add_animal(self, animal):
        self.current_animals[animal.name] = animal.category

    def total_of_category(self, category):
        result = 0
        for animal in self.current_animals.values():
            if category == category:
                result += 1
        return result


zoo = Zoo()

# # Запустите следующую ячейку, чтобы проверить, правильно ли вы заполнили пробелы в своем классе Zoo.

turtle = Turtle("Turtle")  # create an instance of the Turtle class
snake = Snake("Snake")  # create an instance of the Snake class

zoo.add_animal(turtle)
zoo.add_animal(snake)

# # сколько видов животных зоопарка в категории рептилий
print(zoo.total_of_category("reptile"))

# # Был ли выход вышеуказанной ячейки 2? Если нет, вернитесь и отредактируйте класс Zoo, заполнив пробелы соответствующими атрибутами. Обязательно повторно запустите эту ячейку, как только закончите редактирование.

# # Ты понял? Если да, то идеально! Вы успешно определили подклассы Turtle и Snake, а также класс Zoo. Вы все сделали с этой тетрадью. Отличная работа!
