# Для этого проекта вы создадите «облако слов» из текста, написав сценарий. Этот скрипт должен обрабатывать текст, удалять знаки препинания, игнорировать регистр и слова, которые не содержат всех алфавитов, подсчитывать частоты и игнорировать неинтересные или нерелевантные слова. Словарь — это результат работы функции calculate_frequencies. Затем модуль wordcloud сгенерирует изображение из вашего словаря.

# Для входного текста вашего скрипта вам нужно будет предоставить файл, содержащий только текст. Для самого текста вы можете скопировать и вставить содержимое понравившегося веб-сайта. Или вы можете использовать такой сайт, как Project Gutenberg, чтобы найти книги, доступные в Интернете. Вы могли видеть, какие облака слов можно получить из известных книг, таких как пьеса Шекспира или роман Джейн Остин. Сохраните это как файл .txt где-нибудь на своем компьютере.

# Теперь вам нужно будет загрузить сюда свой входной файл, чтобы ваш скрипт смог его обработать. Чтобы выполнить загрузку, вам понадобится виджет загрузчика. Запустите следующую ячейку, чтобы выполнить все установки и импорт вашего скрипта облака слов и виджета загрузки. Для запуска всего этого может потребоваться минута, и будет много выходных сообщений. Но будьте терпеливы. Как только вы получите следующую окончательную строку вывода, выполнение кода будет завершено. Затем вы можете продолжить выполнение остальных инструкций для этой записной книжки.
# Включение загрузки/расширения файла расширения ноутбука...
# - Проверка: ОК

# Вау! Это было много. Все установки и импорт вашего скрипта облака слов и виджета загрузки завершены.

# ВАЖНЫЙ! Если вы впервые запускали указанную выше ячейку, содержащую установки и импорт, вам нужно сохранить эту записную книжку сейчас. Затем в меню «Файл» выше выберите «Закрыть и остановить». Когда ноутбук полностью выключится, снова откройте его. Только так вступят в силу необходимые изменения.

# Чтобы загрузить текстовый файл, запустите следующую ячейку, содержащую весь код пользовательского виджета загрузчика. После того, как вы запустите эту ячейку, под ней должна появиться кнопка «Обзор». Нажмите эту кнопку и перейдите в окно, чтобы найти сохраненный текстовый файл.

# This is the uploader widget

def _upload():

    _upload_widget = fileupload.FileUploadWidget()

    def _cb(change):
        global file_contents
        decoded = io.StringIO(change['owner'].data.decode('utf-8'))
        filename = change['owner'].filename
        print('Uploaded `{}` ({:.2f} kB)'.format(
            filename, len(decoded.read()) / 2 ** 10))
        file_contents = decoded.getvalue()

    _upload_widget.observe(_cb, names='data')
    display(_upload_widget)


_upload()

# The uploader widget saved the contents of your uploaded file into a string object named file_contents that your word cloud script can process. This was a lot of preliminary work, but you are now ready to begin your script.

# Напишите в ячейке ниже функцию, которая перебирает слова в файле file_contents, удаляет знаки препинания и подсчитывает частоту каждого слова. О, и не забудьте сделать так, чтобы он игнорировал регистр слов, слова, которые не содержат всех алфавитов, и скучные слова, такие как «и» или «то». Затем используйте его в функции generate_from_frequencies, чтобы сгенерировать собственное облако слов!


def calculate_frequencies(file_contents):
    # Here is a list of punctuations and uninteresting words you can use to process your text
    punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
    uninteresting_words = ["the", "a", "to", "if", "is", "it", "of", "and", "or", "an", "as", "i", "me", "my",
                           "we", "our", "ours", "you", "your", "yours", "he", "she", "him", "his", "her", "hers", "its", "they", "them",
                           "their", "what", "which", "who", "whom", "this", "that", "am", "are", "was", "were", "be", "been", "being",
                           "have", "has", "had", "do", "does", "did", "but", "at", "by", "with", "from", "here", "when", "where", "how",
                           "all", "any", "both", "each", "few", "more", "some", "such", "no", "nor", "too", "very", "can", "will", "just"]

    # LEARNER CODE START HERE

    # wordcloud
    cloud = wordcloud.WordCloud()
    cloud.generate_from_frequencies()
    return cloud.to_array()

# Если вы все сделали правильно, ваше изображение облака слов должно появиться после запуска ячейки ниже. Скрещенные пальцы!

# Display your wordcloud image


myimage = calculate_frequencies(file_contents)
plt.imshow(myimage, interpolation='nearest')
plt.axis('off')
plt.show()

# Если ваше изображение облака слов не появилось, вернитесь и переделайте свою функцию calculate_frequencies, пока не получите желаемый результат. Обязательно проверьте, что вы передали свой словарь подсчета частот в функцию generate_from_frequencies wordcloud. Как только вы правильно отобразите изображение облака слов, вы закончите этот проект. Хорошо сделано!
